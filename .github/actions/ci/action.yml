name: CI Workflow
description: 'Shared CI workflow.'
inputs:
  lua-version:
    description: 'Version of Lua to use for building and testing.'
    required: false
    default: '5.3'
  cpp-sdk-redis-version:
    description: 'Version of the C++ Server-side SDK with Redis Source to use for building and testing.'
    required: false
  rockspec:
    description: 'The rockspec file for the server-side SDK.'
    required: true
  aws-arn:
    description: 'The AWS role ARN to use for verifying the example output'
    required: true

runs:
  using: composite
  steps:
    - name: Get C++ Versions
      id: cpp-versions
      uses: ./.github/actions/cpp-versions
    - name: Install Lua
      uses: leafo/gh-actions-lua@35bcb06abec04ec87df82e08caa84d545348536e
      with:
        luaVersion: ${{ inputs.lua-version }}
    - name: Install LuaRocks
      uses: leafo/gh-actions-luarocks@e65774a6386cb4f24e293dca7fc4ff89165b64c5
    - name: Install Boost
      id: install-boost
      uses: MarkusJx/install-boost@v2.4.4
      with:
        boost_version: 1.81.0
        platform_version: "22.04"
    - name: Install CPP SDK
      uses: ./.github/actions/install-cpp-sdk-redis
      with:
          version: ${{ inputs.cpp-sdk-redis-version }}
          path: cpp-sdk

    - name: Build Package
      shell: bash
      env:
        CPP_PATH: ${{ github.workspace }}/cpp-sdk/build-dynamic/release
      run:  |
        luarocks make ${{ inputs.rockspec }} \
        LD_DIR=$CPP_PATH \
        LDREDIS_DIR=$CPP_PATH

    - name: Run Tests
      shell: bash
      run: luarocks test ${{ inputs.rockspec }}
      env:
        # Needed because boost isn't installed in default system paths, which is
        # what the C++ Server-side SDK shared object expects.
        LD_LIBRARY_PATH: ${{ steps.install-boost.outputs.BOOST_ROOT }}/lib;./cpp-sdk/build-dynamic/release/lib
        LUA_INTERPRETER: ${{ contains(inputs.lua-version, 'jit') && 'luajit' || 'lua' }}

    - name: SANITY CHECK
      if: ${{ !contains(inputs.lua-version, 'jit') }}
      shell: bash
      run: |
        cd ./examples/hello-lua-server
        lua hello.lua
      env:
        LAUNCHDARKLY_SDK_KEY: "fake-sdk-key"
        # Needed because boost isn't installed in default system paths, which is
        # what the C++ Server-side SDK shared object expects.
        LD_LIBRARY_PATH: ${{ steps.install-boost.outputs.BOOST_ROOT }}/lib

    - name: Copy get_from_env to directory above this
      shell: bash
      run: |
        cp -r ./examples/env-helper ../env-helper
    - uses: launchdarkly/gh-actions/actions/verify-hello-app@c47c497d4d2a9d662699d48828be060db274d333
      if: ${{ !contains(inputs.lua-version, 'jit') }}
      name: 'Verify hello-lua-server example'
      env:
        # Needed because boost isn't installed in default system paths, which is
        # what the C++ Server-side SDK shared object expects.
        LD_LIBRARY_PATH: ${{ steps.install-boost.outputs.BOOST_ROOT }}/lib
      with:
        use_server_key: true
        role_arn: ${{ inputs.aws-arn }}
        command: lua ./examples/hello-lua-server/hello.lua
